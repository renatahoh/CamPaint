import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.swing.*;

/**
 * Class with method to find regions of roughly the same color in an image, to recolor these regions to a random color,
 * and find the largest region in the image with a determined color.
 *
 * @author Emiko Rohn and Renata Edaes Hoh
 * CS10 Winter 2023, Jan 22
 */

/**
 * Webcam-based drawing 
 * Scaffold for PS-1, Dartmouth CS 10, Fall 2016
 * 
 * @author Chris Bailey-Kellogg, Spring 2015 (based on a different webcam app from previous terms)
 */
public class CamPaint extends Webcam {
	private char displayMode = 'w';			// what to display: 'w': live webcam, 'r': recolored image, 'p': painting
	private RegionFinder finder;			// handles the finding
	private Color targetColor;          	// color of regions of interest (set by mouse press)
	private Color paintColor = Color.blue;	// the color to put into the painting from the "brush"
	private BufferedImage painting;			// the resulting masterpiece

	/**
	 * Initializes the region finder and the drawing
	 */
	public CamPaint() {
		finder = new RegionFinder();
		clearPainting();
	}

	/**
	 * Resets the painting to a blank image
	 */
	protected void clearPainting() {
		painting = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
	}

	/**
	 * DrawingGUI method, here drawing one of live webcam, recolored image, or painting, 
	 * depending on display variable ('w', 'r', or 'p')
	 *
	 *  Here, live webcam is just the streaming video with no processing; recolored image is from region
	 *  finder (as in the static version and the example regions at the top); and the painting is the
	 *  tracks left by the paintbrush over time (as in the blue smiley above).
	 */
	@Override
	public void draw(Graphics g) {
		if (displayMode == 'w') { // just displays webcam without any processing
			g.drawImage(image, 0, 0, null);
		}
		else if (displayMode == 'r') { // displaying recolored image, with regions in random colors
			g.drawImage(finder.getRecoloredImage(), 0, 0, null);
		}
		else if (displayMode == 'p') { // displaying white image with paintbrush marks
			g.drawImage(painting, 0, 0, null);
		}
	}

	/**
	 * Webcam method, here finding regions and updating the painting.
	 *
	 * You need to plug in calls to your region finder within processImage, in order to find the
	 * largest region. Be sure to give the region finder the image and the color (and that those aren't null).
	 */
	@Override
	public void processImage() {

		if (image != null && targetColor != null) { // first make sure image exists and targetColor exists
			// set image to the webcam image, find regions of set targetColor in the webcam and recolor the image displayed
			finder.setImage(image);
			finder.findRegions(targetColor);
			finder.recolorImage();
			ArrayList<Point> arr = finder.largestRegion(); // create array with pixels in the largest region
			// if largestRegion exists, loop over its pixels and set the pixels with same coordinates
			// in the painting image to the paintColor
			if (arr != null) {
				for (Point p : arr) {
					painting.setRGB(p.x, p.y, paintColor.getRGB());
				}
			}
		}
	}

	/**
	 * Overrides the DrawingGUI method to set the track color.
	 */
	@Override
	public void handleMousePress(int x, int y) {
		// Just finding color in pixel with coordinates where mouse was pressed
		if (image != null) {
			targetColor = new Color(image.getRGB(x, y));
			System.out.println("Color set!");
		}
	}

	/**
	 * DrawingGUI method, here doing various drawing commands
	 */
	@Override
	public void handleKeyPress(char k) {
		if (k == 'p' || k == 'r' || k == 'w') { // display: painting, recolored image, or webcam
			displayMode = k;
		}
		else if (k == 'c') { // clear
			clearPainting();
		}
		else if (k == 'o') { // save the recolored image
			saveImage(finder.getRecoloredImage(), "pictures/recolored.png", "png");
		}
		else if (k == 's') { // save the painting
			saveImage(painting, "pictures/painting.png", "png");
		}
		else {
			System.out.println("unexpected key "+k);
		}
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new CamPaint();
			}
		});
	}
}
